/* tslint:disable */
/* eslint-disable */
/**
 * TimeSide API
 * RESTful API of TimeSide, a scalable audio processing framework.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ResultVisualizationVisualization
 */
export interface ResultVisualizationVisualization {
    /**
     * 
     * @type {string}
     * @memberof ResultVisualizationVisualization
     */
    readonly subprocessorId?: string;
    /**
     * 
     * @type {number}
     * @memberof ResultVisualizationVisualization
     */
    start?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultVisualizationVisualization
     */
    stop?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultVisualizationVisualization
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof ResultVisualizationVisualization
     */
    height?: number;
}

export function ResultVisualizationVisualizationFromJSON(json: any): ResultVisualizationVisualization {
    return ResultVisualizationVisualizationFromJSONTyped(json, false);
}

export function ResultVisualizationVisualizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResultVisualizationVisualization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subprocessorId': !exists(json, 'subprocessor_id') ? undefined : json['subprocessor_id'],
        'start': !exists(json, 'start') ? undefined : json['start'],
        'stop': !exists(json, 'stop') ? undefined : json['stop'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
    };
}

export function ResultVisualizationVisualizationToJSON(value?: ResultVisualizationVisualization | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'start': value.start,
        'stop': value.stop,
        'width': value.width,
        'height': value.height,
    };
}


