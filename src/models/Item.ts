/* tslint:disable */
/* eslint-disable */
/**
 * TimeSide API
 * RESTful API of TimeSide, a scalable audio processing framework.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemAudioUrl,
    ItemAudioUrlFromJSON,
    ItemAudioUrlFromJSONTyped,
    ItemAudioUrlToJSON,
} from './';

/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    readonly uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    readonly url?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    readonly playerUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * Audio file to process.
     * @type {Blob}
     * @memberof Item
     */
    sourceFile?: Blob;
    /**
     * URL of a streamable audio source to process.
     * @type {string}
     * @memberof Item
     */
    sourceUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    mimeType?: string;
    /**
     * 
     * @type {ItemAudioUrl}
     * @memberof Item
     */
    audioUrl?: ItemAudioUrl;
    /**
     * Duration of audio track.
     * @type {number}
     * @memberof Item
     */
    readonly audioDuration?: number;
    /**
     * Sampling rate of audio source file.
     * @type {number}
     * @memberof Item
     */
    readonly samplerate?: number;
    /**
     * Provider\'s URI of the audio source.  e.g. for Deezer preview: http://www.deezer.com/track/4763165  e.g. for YouTube: https://www.youtube.com/watch?v=oRdxUFDoQe0
     * @type {string}
     * @memberof Item
     */
    externalUri?: string;
    /**
     * Provider\'s id of the audio source.  e.g. for Deezer preview: 4763165  e.g. for YouTube: oRdxUFDoQe0
     * @type {string}
     * @memberof Item
     */
    externalId?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    readonly waveformUrl?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    readonly annotationTracks?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Item
     */
    readonly analysisTracks?: Array<string>;
    /**
     * Audio provider (e.g. Deezer, Youtube, etc.)
     * @type {string}
     * @memberof Item
     */
    provider?: string | null;
}

export function ItemFromJSON(json: any): Item {
    return ItemFromJSONTyped(json, false);
}

export function ItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): Item {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'playerUrl': !exists(json, 'player_url') ? undefined : json['player_url'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'sourceFile': !exists(json, 'source_file') ? undefined : json['source_file'],
        'sourceUrl': !exists(json, 'source_url') ? undefined : json['source_url'],
        'mimeType': !exists(json, 'mime_type') ? undefined : json['mime_type'],
        'audioUrl': !exists(json, 'audio_url') ? undefined : ItemAudioUrlFromJSON(json['audio_url']),
        'audioDuration': !exists(json, 'audio_duration') ? undefined : json['audio_duration'],
        'samplerate': !exists(json, 'samplerate') ? undefined : json['samplerate'],
        'externalUri': !exists(json, 'external_uri') ? undefined : json['external_uri'],
        'externalId': !exists(json, 'external_id') ? undefined : json['external_id'],
        'waveformUrl': !exists(json, 'waveform_url') ? undefined : json['waveform_url'],
        'annotationTracks': !exists(json, 'annotation_tracks') ? undefined : json['annotation_tracks'],
        'analysisTracks': !exists(json, 'analysis_tracks') ? undefined : json['analysis_tracks'],
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
    };
}

export function ItemToJSON(value?: Item | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'source_file': value.sourceFile,
        'source_url': value.sourceUrl,
        'mime_type': value.mimeType,
        'audio_url': ItemAudioUrlToJSON(value.audioUrl),
        'external_uri': value.externalUri,
        'external_id': value.externalId,
        'provider': value.provider,
    };
}


