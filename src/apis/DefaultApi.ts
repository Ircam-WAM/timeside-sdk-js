/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Analysis,
    AnalysisFromJSON,
    AnalysisToJSON,
    AnalysisTrack,
    AnalysisTrackFromJSON,
    AnalysisTrackToJSON,
    Annotation,
    AnnotationFromJSON,
    AnnotationToJSON,
    AnnotationTrack,
    AnnotationTrackFromJSON,
    AnnotationTrackToJSON,
    Experience,
    ExperienceFromJSON,
    ExperienceToJSON,
    Item,
    ItemFromJSON,
    ItemToJSON,
    Preset,
    PresetFromJSON,
    PresetToJSON,
    Processor,
    ProcessorFromJSON,
    ProcessorToJSON,
    Provider,
    ProviderFromJSON,
    ProviderToJSON,
    Result,
    ResultFromJSON,
    ResultToJSON,
    Selection,
    SelectionFromJSON,
    SelectionToJSON,
    SubProcessor,
    SubProcessorFromJSON,
    SubProcessorToJSON,
    Task,
    TaskFromJSON,
    TaskToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface CreateAnalysisRequest {
    body?: Analysis;
}

export interface CreateAnalysisTrackRequest {
    body?: AnalysisTrack;
}

export interface CreateAnnotationRequest {
    body?: Annotation;
}

export interface CreateAnnotationTrackRequest {
    body?: AnnotationTrack;
}

export interface CreateExperienceRequest {
    body?: Experience;
}

export interface CreateItemRequest {
    body?: Item;
}

export interface CreatePresetRequest {
    body?: Preset;
}

export interface CreateProcessorRequest {
    body?: Processor;
}

export interface CreateProviderRequest {
    body?: Provider;
}

export interface CreateResultRequest {
    body?: Result;
}

export interface CreateSelectionRequest {
    body?: Selection;
}

export interface CreateSubProcessorRequest {
    body?: SubProcessor;
}

export interface CreateTaskRequest {
    body?: Task;
}

export interface CreateUserRequest {
    body?: User;
}

export interface DestroyAnalysisRequest {
    uuid: string;
}

export interface DestroyAnalysisTrackRequest {
    uuid: string;
}

export interface DestroyAnnotationRequest {
    uuid: string;
}

export interface DestroyAnnotationTrackRequest {
    uuid: string;
}

export interface DestroyExperienceRequest {
    uuid: string;
}

export interface DestroyItemRequest {
    uuid: string;
    search?: string;
}

export interface DestroyPresetRequest {
    uuid: string;
}

export interface DestroyProcessorRequest {
    pid: string;
}

export interface DestroyProviderRequest {
    uuid: string;
}

export interface DestroyResultRequest {
    uuid: string;
    search?: string;
}

export interface DestroySelectionRequest {
    uuid: string;
}

export interface DestroySubProcessorRequest {
    subProcessorId: string;
}

export interface DestroyTaskRequest {
    uuid: string;
}

export interface DestroyUserRequest {
    username: string;
}

export interface ListItemsRequest {
    search?: string;
}

export interface ListResultsRequest {
    search?: string;
}

export interface ParametersDefaultAnalysisTrackRequest {
    uuid: string;
}

export interface ParametersDefaultProcessorRequest {
    pid: string;
}

export interface ParametersSchemaProcessorRequest {
    pid: string;
}

export interface PartialUpdateAnalysisRequest {
    uuid: string;
    body?: Analysis;
}

export interface PartialUpdateAnalysisTrackRequest {
    uuid: string;
    body?: AnalysisTrack;
}

export interface PartialUpdateAnnotationRequest {
    uuid: string;
    body?: Annotation;
}

export interface PartialUpdateAnnotationTrackRequest {
    uuid: string;
    body?: AnnotationTrack;
}

export interface PartialUpdateExperienceRequest {
    uuid: string;
    body?: Experience;
}

export interface PartialUpdateItemRequest {
    uuid: string;
    search?: string;
    body?: Item;
}

export interface PartialUpdatePresetRequest {
    uuid: string;
    body?: Preset;
}

export interface PartialUpdateProcessorRequest {
    pid: string;
    body?: Processor;
}

export interface PartialUpdateProviderRequest {
    uuid: string;
    body?: Provider;
}

export interface PartialUpdateResultRequest {
    uuid: string;
    search?: string;
    body?: Result;
}

export interface PartialUpdateSelectionRequest {
    uuid: string;
    body?: Selection;
}

export interface PartialUpdateSubProcessorRequest {
    subProcessorId: string;
    body?: SubProcessor;
}

export interface PartialUpdateTaskRequest {
    uuid: string;
    body?: Task;
}

export interface PartialUpdateUserRequest {
    username: string;
    body?: User;
}

export interface RetrieveAnalysisRequest {
    uuid: string;
}

export interface RetrieveAnalysisTrackRequest {
    uuid: string;
}

export interface RetrieveAnnotationRequest {
    uuid: string;
}

export interface RetrieveAnnotationTrackRequest {
    uuid: string;
}

export interface RetrieveExperienceRequest {
    uuid: string;
}

export interface RetrieveItemRequest {
    uuid: string;
    search?: string;
}

export interface RetrieveItem0Request {
    uuid: string;
}

export interface RetrievePresetRequest {
    uuid: string;
}

export interface RetrieveProcessorRequest {
    pid: string;
}

export interface RetrieveProviderRequest {
    uuid: string;
}

export interface RetrieveResultRequest {
    uuid: string;
    search?: string;
}

export interface RetrieveResult0Request {
    uuid: string;
}

export interface RetrieveSelectionRequest {
    uuid: string;
}

export interface RetrieveSubProcessorRequest {
    subProcessorId: string;
}

export interface RetrieveTaskRequest {
    uuid: string;
}

export interface RetrieveUserRequest {
    username: string;
}

export interface SetParametersAnalysisTrackRequest {
    uuid: string;
    body?: AnalysisTrack;
}

export interface UpdateAnalysisRequest {
    uuid: string;
    body?: Analysis;
}

export interface UpdateAnalysisTrackRequest {
    uuid: string;
    body?: AnalysisTrack;
}

export interface UpdateAnnotationRequest {
    uuid: string;
    body?: Annotation;
}

export interface UpdateAnnotationTrackRequest {
    uuid: string;
    body?: AnnotationTrack;
}

export interface UpdateExperienceRequest {
    uuid: string;
    body?: Experience;
}

export interface UpdateItemRequest {
    uuid: string;
    search?: string;
    body?: Item;
}

export interface UpdatePresetRequest {
    uuid: string;
    body?: Preset;
}

export interface UpdateProcessorRequest {
    pid: string;
    body?: Processor;
}

export interface UpdateProviderRequest {
    uuid: string;
    body?: Provider;
}

export interface UpdateResultRequest {
    uuid: string;
    search?: string;
    body?: Result;
}

export interface UpdateSelectionRequest {
    uuid: string;
    body?: Selection;
}

export interface UpdateSubProcessorRequest {
    subProcessorId: string;
    body?: SubProcessor;
}

export interface UpdateTaskRequest {
    uuid: string;
    body?: Task;
}

export interface UpdateUserRequest {
    username: string;
    body?: User;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createAnalysisRaw(requestParameters: CreateAnalysisRequest): Promise<runtime.ApiResponse<Analysis>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/analysis/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysisToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisFromJSON(jsonValue));
    }

    /**
     */
    async createAnalysis(requestParameters: CreateAnalysisRequest): Promise<Analysis> {
        const response = await this.createAnalysisRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createAnalysisTrackRaw(requestParameters: CreateAnalysisTrackRequest): Promise<runtime.ApiResponse<AnalysisTrack>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysisTrackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisTrackFromJSON(jsonValue));
    }

    /**
     */
    async createAnalysisTrack(requestParameters: CreateAnalysisTrackRequest): Promise<AnalysisTrack> {
        const response = await this.createAnalysisTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createAnnotationRaw(requestParameters: CreateAnnotationRequest): Promise<runtime.ApiResponse<Annotation>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/annotations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     */
    async createAnnotation(requestParameters: CreateAnnotationRequest): Promise<Annotation> {
        const response = await this.createAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createAnnotationTrackRaw(requestParameters: CreateAnnotationTrackRequest): Promise<runtime.ApiResponse<AnnotationTrack>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/annotation_tracks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationTrackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationTrackFromJSON(jsonValue));
    }

    /**
     */
    async createAnnotationTrack(requestParameters: CreateAnnotationTrackRequest): Promise<AnnotationTrack> {
        const response = await this.createAnnotationTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createExperienceRaw(requestParameters: CreateExperienceRequest): Promise<runtime.ApiResponse<Experience>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/experiences/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExperienceToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceFromJSON(jsonValue));
    }

    /**
     */
    async createExperience(requestParameters: CreateExperienceRequest): Promise<Experience> {
        const response = await this.createExperienceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createItemRaw(requestParameters: CreateItemRequest): Promise<runtime.ApiResponse<Item>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/items/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async createItem(requestParameters: CreateItemRequest): Promise<Item> {
        const response = await this.createItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createPresetRaw(requestParameters: CreatePresetRequest): Promise<runtime.ApiResponse<Preset>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/presets/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PresetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PresetFromJSON(jsonValue));
    }

    /**
     */
    async createPreset(requestParameters: CreatePresetRequest): Promise<Preset> {
        const response = await this.createPresetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createProcessorRaw(requestParameters: CreateProcessorRequest): Promise<runtime.ApiResponse<Processor>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/processors/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorFromJSON(jsonValue));
    }

    /**
     */
    async createProcessor(requestParameters: CreateProcessorRequest): Promise<Processor> {
        const response = await this.createProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createProviderRaw(requestParameters: CreateProviderRequest): Promise<runtime.ApiResponse<Provider>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/providers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async createProvider(requestParameters: CreateProviderRequest): Promise<Provider> {
        const response = await this.createProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createResultRaw(requestParameters: CreateResultRequest): Promise<runtime.ApiResponse<Result>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/results/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResultToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultFromJSON(jsonValue));
    }

    /**
     */
    async createResult(requestParameters: CreateResultRequest): Promise<Result> {
        const response = await this.createResultRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createSelectionRaw(requestParameters: CreateSelectionRequest): Promise<runtime.ApiResponse<Selection>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/selections/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SelectionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectionFromJSON(jsonValue));
    }

    /**
     */
    async createSelection(requestParameters: CreateSelectionRequest): Promise<Selection> {
        const response = await this.createSelectionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createSubProcessorRaw(requestParameters: CreateSubProcessorRequest): Promise<runtime.ApiResponse<SubProcessor>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/subprocessors/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubProcessorToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubProcessorFromJSON(jsonValue));
    }

    /**
     */
    async createSubProcessor(requestParameters: CreateSubProcessorRequest): Promise<SubProcessor> {
        const response = await this.createSubProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createTaskRaw(requestParameters: CreateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/tasks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async createTask(requestParameters: CreateTaskRequest): Promise<Task> {
        const response = await this.createTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async createUser(requestParameters: CreateUserRequest): Promise<User> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async destroyAnalysisRaw(requestParameters: DestroyAnalysisRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyAnalysis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/analysis/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyAnalysis(requestParameters: DestroyAnalysisRequest): Promise<void> {
        await this.destroyAnalysisRaw(requestParameters);
    }

    /**
     */
    async destroyAnalysisTrackRaw(requestParameters: DestroyAnalysisTrackRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyAnalysisTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyAnalysisTrack(requestParameters: DestroyAnalysisTrackRequest): Promise<void> {
        await this.destroyAnalysisTrackRaw(requestParameters);
    }

    /**
     */
    async destroyAnnotationRaw(requestParameters: DestroyAnnotationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/annotations/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyAnnotation(requestParameters: DestroyAnnotationRequest): Promise<void> {
        await this.destroyAnnotationRaw(requestParameters);
    }

    /**
     */
    async destroyAnnotationTrackRaw(requestParameters: DestroyAnnotationTrackRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyAnnotationTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/annotation_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyAnnotationTrack(requestParameters: DestroyAnnotationTrackRequest): Promise<void> {
        await this.destroyAnnotationTrackRaw(requestParameters);
    }

    /**
     */
    async destroyExperienceRaw(requestParameters: DestroyExperienceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyExperience.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/experiences/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyExperience(requestParameters: DestroyExperienceRequest): Promise<void> {
        await this.destroyExperienceRaw(requestParameters);
    }

    /**
     */
    async destroyItemRaw(requestParameters: DestroyItemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/items/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyItem(requestParameters: DestroyItemRequest): Promise<void> {
        await this.destroyItemRaw(requestParameters);
    }

    /**
     */
    async destroyPresetRaw(requestParameters: DestroyPresetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyPreset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/presets/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyPreset(requestParameters: DestroyPresetRequest): Promise<void> {
        await this.destroyPresetRaw(requestParameters);
    }

    /**
     */
    async destroyProcessorRaw(requestParameters: DestroyProcessorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling destroyProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/processors/{pid}/`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyProcessor(requestParameters: DestroyProcessorRequest): Promise<void> {
        await this.destroyProcessorRaw(requestParameters);
    }

    /**
     */
    async destroyProviderRaw(requestParameters: DestroyProviderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/providers/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyProvider(requestParameters: DestroyProviderRequest): Promise<void> {
        await this.destroyProviderRaw(requestParameters);
    }

    /**
     */
    async destroyResultRaw(requestParameters: DestroyResultRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/results/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyResult(requestParameters: DestroyResultRequest): Promise<void> {
        await this.destroyResultRaw(requestParameters);
    }

    /**
     */
    async destroySelectionRaw(requestParameters: DestroySelectionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroySelection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/selections/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroySelection(requestParameters: DestroySelectionRequest): Promise<void> {
        await this.destroySelectionRaw(requestParameters);
    }

    /**
     */
    async destroySubProcessorRaw(requestParameters: DestroySubProcessorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.subProcessorId === null || requestParameters.subProcessorId === undefined) {
            throw new runtime.RequiredError('subProcessorId','Required parameter requestParameters.subProcessorId was null or undefined when calling destroySubProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/subprocessors/{sub_processor_id}/`.replace(`{${"sub_processor_id"}}`, encodeURIComponent(String(requestParameters.subProcessorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroySubProcessor(requestParameters: DestroySubProcessorRequest): Promise<void> {
        await this.destroySubProcessorRaw(requestParameters);
    }

    /**
     */
    async destroyTaskRaw(requestParameters: DestroyTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling destroyTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/tasks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyTask(requestParameters: DestroyTaskRequest): Promise<void> {
        await this.destroyTaskRaw(requestParameters);
    }

    /**
     */
    async destroyUserRaw(requestParameters: DestroyUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling destroyUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyUser(requestParameters: DestroyUserRequest): Promise<void> {
        await this.destroyUserRaw(requestParameters);
    }

    /**
     */
    async listAnalysisRaw(): Promise<runtime.ApiResponse<Array<Analysis>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/analysis/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnalysisFromJSON));
    }

    /**
     */
    async listAnalysis(): Promise<Array<Analysis>> {
        const response = await this.listAnalysisRaw();
        return await response.value();
    }

    /**
     */
    async listAnalysisTracksRaw(): Promise<runtime.ApiResponse<Array<AnalysisTrack>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnalysisTrackFromJSON));
    }

    /**
     */
    async listAnalysisTracks(): Promise<Array<AnalysisTrack>> {
        const response = await this.listAnalysisTracksRaw();
        return await response.value();
    }

    /**
     */
    async listAnnotationTracksRaw(): Promise<runtime.ApiResponse<Array<AnnotationTrack>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/annotation_tracks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnnotationTrackFromJSON));
    }

    /**
     */
    async listAnnotationTracks(): Promise<Array<AnnotationTrack>> {
        const response = await this.listAnnotationTracksRaw();
        return await response.value();
    }

    /**
     */
    async listAnnotationsRaw(): Promise<runtime.ApiResponse<Array<Annotation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/annotations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnnotationFromJSON));
    }

    /**
     */
    async listAnnotations(): Promise<Array<Annotation>> {
        const response = await this.listAnnotationsRaw();
        return await response.value();
    }

    /**
     */
    async listCsrfTokensRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/token-csrf/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async listCsrfTokens(): Promise<Array<object>> {
        const response = await this.listCsrfTokensRaw();
        return await response.value();
    }

    /**
     */
    async listExperiencesRaw(): Promise<runtime.ApiResponse<Array<Experience>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/experiences/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExperienceFromJSON));
    }

    /**
     */
    async listExperiences(): Promise<Array<Experience>> {
        const response = await this.listExperiencesRaw();
        return await response.value();
    }

    /**
     */
    async listItemsRaw(requestParameters: ListItemsRequest): Promise<runtime.ApiResponse<Array<Item>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/items/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     */
    async listItems(requestParameters: ListItemsRequest): Promise<Array<Item>> {
        const response = await this.listItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listPresetsRaw(): Promise<runtime.ApiResponse<Array<Preset>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/presets/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PresetFromJSON));
    }

    /**
     */
    async listPresets(): Promise<Array<Preset>> {
        const response = await this.listPresetsRaw();
        return await response.value();
    }

    /**
     */
    async listProcessorsRaw(): Promise<runtime.ApiResponse<Array<Processor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/processors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessorFromJSON));
    }

    /**
     */
    async listProcessors(): Promise<Array<Processor>> {
        const response = await this.listProcessorsRaw();
        return await response.value();
    }

    /**
     */
    async listProvidersRaw(): Promise<runtime.ApiResponse<Array<Provider>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/providers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderFromJSON));
    }

    /**
     */
    async listProviders(): Promise<Array<Provider>> {
        const response = await this.listProvidersRaw();
        return await response.value();
    }

    /**
     */
    async listResultsRaw(requestParameters: ListResultsRequest): Promise<runtime.ApiResponse<Array<Result>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/results/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResultFromJSON));
    }

    /**
     */
    async listResults(requestParameters: ListResultsRequest): Promise<Array<Result>> {
        const response = await this.listResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listSelectionsRaw(): Promise<runtime.ApiResponse<Array<Selection>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/selections/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SelectionFromJSON));
    }

    /**
     */
    async listSelections(): Promise<Array<Selection>> {
        const response = await this.listSelectionsRaw();
        return await response.value();
    }

    /**
     */
    async listSubProcessorsRaw(): Promise<runtime.ApiResponse<Array<SubProcessor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/subprocessors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubProcessorFromJSON));
    }

    /**
     */
    async listSubProcessors(): Promise<Array<SubProcessor>> {
        const response = await this.listSubProcessorsRaw();
        return await response.value();
    }

    /**
     */
    async listTasksRaw(): Promise<runtime.ApiResponse<Array<Task>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/tasks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     */
    async listTasks(): Promise<Array<Task>> {
        const response = await this.listTasksRaw();
        return await response.value();
    }

    /**
     */
    async listUsersRaw(): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async listUsers(): Promise<Array<User>> {
        const response = await this.listUsersRaw();
        return await response.value();
    }

    /**
     */
    async parametersDefaultAnalysisTrackRaw(requestParameters: ParametersDefaultAnalysisTrackRequest): Promise<runtime.ApiResponse<AnalysisTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling parametersDefaultAnalysisTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/{uuid}/parameters_default/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisTrackFromJSON(jsonValue));
    }

    /**
     */
    async parametersDefaultAnalysisTrack(requestParameters: ParametersDefaultAnalysisTrackRequest): Promise<AnalysisTrack> {
        const response = await this.parametersDefaultAnalysisTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parametersDefaultProcessorRaw(requestParameters: ParametersDefaultProcessorRequest): Promise<runtime.ApiResponse<Processor>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling parametersDefaultProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/processors/{pid}/parameters_default/`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorFromJSON(jsonValue));
    }

    /**
     */
    async parametersDefaultProcessor(requestParameters: ParametersDefaultProcessorRequest): Promise<Processor> {
        const response = await this.parametersDefaultProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parametersSchemaProcessorRaw(requestParameters: ParametersSchemaProcessorRequest): Promise<runtime.ApiResponse<Processor>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling parametersSchemaProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/processors/{pid}/parameters_schema/`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorFromJSON(jsonValue));
    }

    /**
     */
    async parametersSchemaProcessor(requestParameters: ParametersSchemaProcessorRequest): Promise<Processor> {
        const response = await this.parametersSchemaProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateAnalysisRaw(requestParameters: PartialUpdateAnalysisRequest): Promise<runtime.ApiResponse<Analysis>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateAnalysis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/analysis/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysisToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateAnalysis(requestParameters: PartialUpdateAnalysisRequest): Promise<Analysis> {
        const response = await this.partialUpdateAnalysisRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateAnalysisTrackRaw(requestParameters: PartialUpdateAnalysisTrackRequest): Promise<runtime.ApiResponse<AnalysisTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateAnalysisTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysisTrackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisTrackFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateAnalysisTrack(requestParameters: PartialUpdateAnalysisTrackRequest): Promise<AnalysisTrack> {
        const response = await this.partialUpdateAnalysisTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateAnnotationRaw(requestParameters: PartialUpdateAnnotationRequest): Promise<runtime.ApiResponse<Annotation>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/annotations/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateAnnotation(requestParameters: PartialUpdateAnnotationRequest): Promise<Annotation> {
        const response = await this.partialUpdateAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateAnnotationTrackRaw(requestParameters: PartialUpdateAnnotationTrackRequest): Promise<runtime.ApiResponse<AnnotationTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateAnnotationTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/annotation_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationTrackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationTrackFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateAnnotationTrack(requestParameters: PartialUpdateAnnotationTrackRequest): Promise<AnnotationTrack> {
        const response = await this.partialUpdateAnnotationTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateExperienceRaw(requestParameters: PartialUpdateExperienceRequest): Promise<runtime.ApiResponse<Experience>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateExperience.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/experiences/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ExperienceToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateExperience(requestParameters: PartialUpdateExperienceRequest): Promise<Experience> {
        const response = await this.partialUpdateExperienceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateItemRaw(requestParameters: PartialUpdateItemRequest): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/items/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateItem(requestParameters: PartialUpdateItemRequest): Promise<Item> {
        const response = await this.partialUpdateItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdatePresetRaw(requestParameters: PartialUpdatePresetRequest): Promise<runtime.ApiResponse<Preset>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdatePreset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/presets/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PresetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PresetFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdatePreset(requestParameters: PartialUpdatePresetRequest): Promise<Preset> {
        const response = await this.partialUpdatePresetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateProcessorRaw(requestParameters: PartialUpdateProcessorRequest): Promise<runtime.ApiResponse<Processor>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling partialUpdateProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/processors/{pid}/`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateProcessor(requestParameters: PartialUpdateProcessorRequest): Promise<Processor> {
        const response = await this.partialUpdateProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateProviderRaw(requestParameters: PartialUpdateProviderRequest): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/providers/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateProvider(requestParameters: PartialUpdateProviderRequest): Promise<Provider> {
        const response = await this.partialUpdateProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateResultRaw(requestParameters: PartialUpdateResultRequest): Promise<runtime.ApiResponse<Result>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/results/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ResultToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateResult(requestParameters: PartialUpdateResultRequest): Promise<Result> {
        const response = await this.partialUpdateResultRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateSelectionRaw(requestParameters: PartialUpdateSelectionRequest): Promise<runtime.ApiResponse<Selection>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateSelection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/selections/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SelectionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectionFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateSelection(requestParameters: PartialUpdateSelectionRequest): Promise<Selection> {
        const response = await this.partialUpdateSelectionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateSubProcessorRaw(requestParameters: PartialUpdateSubProcessorRequest): Promise<runtime.ApiResponse<SubProcessor>> {
        if (requestParameters.subProcessorId === null || requestParameters.subProcessorId === undefined) {
            throw new runtime.RequiredError('subProcessorId','Required parameter requestParameters.subProcessorId was null or undefined when calling partialUpdateSubProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/subprocessors/{sub_processor_id}/`.replace(`{${"sub_processor_id"}}`, encodeURIComponent(String(requestParameters.subProcessorId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SubProcessorToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubProcessorFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateSubProcessor(requestParameters: PartialUpdateSubProcessorRequest): Promise<SubProcessor> {
        const response = await this.partialUpdateSubProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateTaskRaw(requestParameters: PartialUpdateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling partialUpdateTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/tasks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateTask(requestParameters: PartialUpdateTaskRequest): Promise<Task> {
        const response = await this.partialUpdateTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateUserRaw(requestParameters: PartialUpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling partialUpdateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateUser(requestParameters: PartialUpdateUserRequest): Promise<User> {
        const response = await this.partialUpdateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveAnalysisRaw(requestParameters: RetrieveAnalysisRequest): Promise<runtime.ApiResponse<Analysis>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveAnalysis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/analysis/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisFromJSON(jsonValue));
    }

    /**
     */
    async retrieveAnalysis(requestParameters: RetrieveAnalysisRequest): Promise<Analysis> {
        const response = await this.retrieveAnalysisRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveAnalysisTrackRaw(requestParameters: RetrieveAnalysisTrackRequest): Promise<runtime.ApiResponse<AnalysisTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveAnalysisTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisTrackFromJSON(jsonValue));
    }

    /**
     */
    async retrieveAnalysisTrack(requestParameters: RetrieveAnalysisTrackRequest): Promise<AnalysisTrack> {
        const response = await this.retrieveAnalysisTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveAnnotationRaw(requestParameters: RetrieveAnnotationRequest): Promise<runtime.ApiResponse<Annotation>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/annotations/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     */
    async retrieveAnnotation(requestParameters: RetrieveAnnotationRequest): Promise<Annotation> {
        const response = await this.retrieveAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveAnnotationTrackRaw(requestParameters: RetrieveAnnotationTrackRequest): Promise<runtime.ApiResponse<AnnotationTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveAnnotationTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/annotation_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationTrackFromJSON(jsonValue));
    }

    /**
     */
    async retrieveAnnotationTrack(requestParameters: RetrieveAnnotationTrackRequest): Promise<AnnotationTrack> {
        const response = await this.retrieveAnnotationTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveExperienceRaw(requestParameters: RetrieveExperienceRequest): Promise<runtime.ApiResponse<Experience>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveExperience.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/experiences/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceFromJSON(jsonValue));
    }

    /**
     */
    async retrieveExperience(requestParameters: RetrieveExperienceRequest): Promise<Experience> {
        const response = await this.retrieveExperienceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveItemRaw(requestParameters: RetrieveItemRequest): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/items/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async retrieveItem(requestParameters: RetrieveItemRequest): Promise<Item> {
        const response = await this.retrieveItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveItem_1Raw(requestParameters: RetrieveItem0Request): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveItem_1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/items/{uuid}/waveform/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async retrieveItem_1(requestParameters: RetrieveItem0Request): Promise<Item> {
        const response = await this.retrieveItem_1Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrievePresetRaw(requestParameters: RetrievePresetRequest): Promise<runtime.ApiResponse<Preset>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrievePreset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/presets/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PresetFromJSON(jsonValue));
    }

    /**
     */
    async retrievePreset(requestParameters: RetrievePresetRequest): Promise<Preset> {
        const response = await this.retrievePresetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveProcessorRaw(requestParameters: RetrieveProcessorRequest): Promise<runtime.ApiResponse<Processor>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling retrieveProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/processors/{pid}/`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorFromJSON(jsonValue));
    }

    /**
     */
    async retrieveProcessor(requestParameters: RetrieveProcessorRequest): Promise<Processor> {
        const response = await this.retrieveProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveProviderRaw(requestParameters: RetrieveProviderRequest): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/providers/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async retrieveProvider(requestParameters: RetrieveProviderRequest): Promise<Provider> {
        const response = await this.retrieveProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveResultRaw(requestParameters: RetrieveResultRequest): Promise<runtime.ApiResponse<Result>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/results/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultFromJSON(jsonValue));
    }

    /**
     */
    async retrieveResult(requestParameters: RetrieveResultRequest): Promise<Result> {
        const response = await this.retrieveResultRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveResult_2Raw(requestParameters: RetrieveResult0Request): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveResult_2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/results/{uuid}/visual/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async retrieveResult_2(requestParameters: RetrieveResult0Request): Promise<object> {
        const response = await this.retrieveResult_2Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveSelectionRaw(requestParameters: RetrieveSelectionRequest): Promise<runtime.ApiResponse<Selection>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveSelection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/selections/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectionFromJSON(jsonValue));
    }

    /**
     */
    async retrieveSelection(requestParameters: RetrieveSelectionRequest): Promise<Selection> {
        const response = await this.retrieveSelectionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveSubProcessorRaw(requestParameters: RetrieveSubProcessorRequest): Promise<runtime.ApiResponse<SubProcessor>> {
        if (requestParameters.subProcessorId === null || requestParameters.subProcessorId === undefined) {
            throw new runtime.RequiredError('subProcessorId','Required parameter requestParameters.subProcessorId was null or undefined when calling retrieveSubProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/subprocessors/{sub_processor_id}/`.replace(`{${"sub_processor_id"}}`, encodeURIComponent(String(requestParameters.subProcessorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubProcessorFromJSON(jsonValue));
    }

    /**
     */
    async retrieveSubProcessor(requestParameters: RetrieveSubProcessorRequest): Promise<SubProcessor> {
        const response = await this.retrieveSubProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveTaskRaw(requestParameters: RetrieveTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling retrieveTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/tasks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async retrieveTask(requestParameters: RetrieveTaskRequest): Promise<Task> {
        const response = await this.retrieveTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveUserRaw(requestParameters: RetrieveUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling retrieveUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeside/api/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async retrieveUser(requestParameters: RetrieveUserRequest): Promise<User> {
        const response = await this.retrieveUserRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async setParametersAnalysisTrackRaw(requestParameters: SetParametersAnalysisTrackRequest): Promise<runtime.ApiResponse<AnalysisTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling setParametersAnalysisTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/{uuid}/set_parameters/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysisTrackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisTrackFromJSON(jsonValue));
    }

    /**
     */
    async setParametersAnalysisTrack(requestParameters: SetParametersAnalysisTrackRequest): Promise<AnalysisTrack> {
        const response = await this.setParametersAnalysisTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateAnalysisRaw(requestParameters: UpdateAnalysisRequest): Promise<runtime.ApiResponse<Analysis>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateAnalysis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/analysis/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysisToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisFromJSON(jsonValue));
    }

    /**
     */
    async updateAnalysis(requestParameters: UpdateAnalysisRequest): Promise<Analysis> {
        const response = await this.updateAnalysisRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateAnalysisTrackRaw(requestParameters: UpdateAnalysisTrackRequest): Promise<runtime.ApiResponse<AnalysisTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateAnalysisTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/analysis_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysisTrackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisTrackFromJSON(jsonValue));
    }

    /**
     */
    async updateAnalysisTrack(requestParameters: UpdateAnalysisTrackRequest): Promise<AnalysisTrack> {
        const response = await this.updateAnalysisTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateAnnotationRaw(requestParameters: UpdateAnnotationRequest): Promise<runtime.ApiResponse<Annotation>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateAnnotation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/annotations/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationFromJSON(jsonValue));
    }

    /**
     */
    async updateAnnotation(requestParameters: UpdateAnnotationRequest): Promise<Annotation> {
        const response = await this.updateAnnotationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateAnnotationTrackRaw(requestParameters: UpdateAnnotationTrackRequest): Promise<runtime.ApiResponse<AnnotationTrack>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateAnnotationTrack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/annotation_tracks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotationTrackToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationTrackFromJSON(jsonValue));
    }

    /**
     */
    async updateAnnotationTrack(requestParameters: UpdateAnnotationTrackRequest): Promise<AnnotationTrack> {
        const response = await this.updateAnnotationTrackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateExperienceRaw(requestParameters: UpdateExperienceRequest): Promise<runtime.ApiResponse<Experience>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateExperience.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/experiences/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExperienceToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperienceFromJSON(jsonValue));
    }

    /**
     */
    async updateExperience(requestParameters: UpdateExperienceRequest): Promise<Experience> {
        const response = await this.updateExperienceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateItemRaw(requestParameters: UpdateItemRequest): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/items/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async updateItem(requestParameters: UpdateItemRequest): Promise<Item> {
        const response = await this.updateItemRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updatePresetRaw(requestParameters: UpdatePresetRequest): Promise<runtime.ApiResponse<Preset>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updatePreset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/presets/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PresetToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PresetFromJSON(jsonValue));
    }

    /**
     */
    async updatePreset(requestParameters: UpdatePresetRequest): Promise<Preset> {
        const response = await this.updatePresetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateProcessorRaw(requestParameters: UpdateProcessorRequest): Promise<runtime.ApiResponse<Processor>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling updateProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/processors/{pid}/`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorFromJSON(jsonValue));
    }

    /**
     */
    async updateProcessor(requestParameters: UpdateProcessorRequest): Promise<Processor> {
        const response = await this.updateProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateProviderRaw(requestParameters: UpdateProviderRequest): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateProvider.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/providers/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async updateProvider(requestParameters: UpdateProviderRequest): Promise<Provider> {
        const response = await this.updateProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateResultRaw(requestParameters: UpdateResultRequest): Promise<runtime.ApiResponse<Result>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/results/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResultToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultFromJSON(jsonValue));
    }

    /**
     */
    async updateResult(requestParameters: UpdateResultRequest): Promise<Result> {
        const response = await this.updateResultRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateSelectionRaw(requestParameters: UpdateSelectionRequest): Promise<runtime.ApiResponse<Selection>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateSelection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/selections/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SelectionToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SelectionFromJSON(jsonValue));
    }

    /**
     */
    async updateSelection(requestParameters: UpdateSelectionRequest): Promise<Selection> {
        const response = await this.updateSelectionRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateSubProcessorRaw(requestParameters: UpdateSubProcessorRequest): Promise<runtime.ApiResponse<SubProcessor>> {
        if (requestParameters.subProcessorId === null || requestParameters.subProcessorId === undefined) {
            throw new runtime.RequiredError('subProcessorId','Required parameter requestParameters.subProcessorId was null or undefined when calling updateSubProcessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/subprocessors/{sub_processor_id}/`.replace(`{${"sub_processor_id"}}`, encodeURIComponent(String(requestParameters.subProcessorId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubProcessorToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubProcessorFromJSON(jsonValue));
    }

    /**
     */
    async updateSubProcessor(requestParameters: UpdateSubProcessorRequest): Promise<SubProcessor> {
        const response = await this.updateSubProcessorRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/tasks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async updateTask(requestParameters: UpdateTaskRequest): Promise<Task> {
        const response = await this.updateTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/timeside/api/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<User> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
